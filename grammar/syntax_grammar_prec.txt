program    ::= include* decl* EOF
include    ::= "#include" STRING_LITERAL
decl 	   ::= structdecl | vfdecl
structdecl ::= structtype "{" (vardecl)+ "}" ";"
vfdecl     ::= type IDENT (funprams | vararr)
vardecl    ::= type IDENT vararr
vararr     ::= ("[" INT_LITERAL "]")* ";"
type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT
funprams   ::= "(" params ")" block
params     ::= [ type IDENT ("," type IDENT)* ]

stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt ["else" stmt]
             | "return" [exp] ";"
             | exp ";"
block      ::= "{" (vardecl)* (stmt)* "}"

exp ::= pr7 ("||" pr7)*
pr7 ::= pr6 ("&&" pr6)*
pr6 ::= pr5 ("=="|"!=" pr5)*
pr5 ::= pr4 ("<"|">"|"<="|"=>" pr4)*
pr4 ::= pr3 ("+"|"-" pr3)*
pr3 ::= pr2 ("*"|"/"|"&" pr2)*
pr2 ::= ("-"|"+"|"*"|"&") pr2
      | "(" type ")" pr2 //must check also against "(" exp ")"
	  | pr1
pr1 ::= pr1a "=" pr1
pr1a::=	pr0 ( ("[" exp "]") | ("." IDENT) )*
pr0 ::= "(" exp ")"
      | IDENT
	  | funcall
	  | INT_LITERAL | CHAR_LITERAL | STRING_LITERAL
	  | "sizeof" "(" type ")"

funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"
