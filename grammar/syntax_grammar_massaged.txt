program    ::= (include)* (structdecl | vardecl | fundecl)* EOF
include    ::= "#include" STRING_LITERAL
structdecl ::= structtype "{" (vardecl)+ "}" ";"
vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";"
fundecl    ::= type IDENT "(" params ")" block
type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT
params     ::= [ type IDENT ("," type IDENT)* ]
stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt ["else" stmt]
             | "return" [exp] ";"
             | exp ";"
block      ::= "{" (vardecl)* (stmt)* "}"
exp        ::= "(" exp ")"
             | exp "=" exp
             | (IDENT | INT_LITERAL)
             | ("-" | "+") exp
             | CHAR_LITERAL
             | STRING_LITERAL
             | exp (">" | "<" | ">=" | "<=" | "!=" | "==" | "+" | "-" | "/" | "*" | "%" | "||" | "&&") exp
             | arrayaccess | fieldaccess | valueat | addressof | funcall | sizeof | typecast
funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"
arrayaccess  ::= exp "[" exp "]"
fieldaccess  ::= exp "." IDENT
valueat      ::= "*" exp
addressof    ::= "&" exp
sizeof       ::= "sizeof" "(" type ")"
typecast     ::= "(" type ")" exp
