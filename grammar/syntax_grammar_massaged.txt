program    ::= include* decl* EOF
include    ::= "#include" STRING_LITERAL
decl 	   ::= structdecl | vardecl | fundecl
structdecl ::= structtype "{" (vardecl)+ "}" ";"
vardecl    ::= type IDENT ("[" INT_LITERAL "]")* ";"
fundecl    ::= type IDENT "(" params ")" block
type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]
stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt ["else" stmt]
             | "return" [exp] ";"
             | exp ";"
block      ::= "{" (vardecl)* (stmt)* "}"

exp   ::= ("-" | "+") exp
		| valueat | addressof
        | typecast
        | "(" exp ")" expp
		| IDENT expp
		| funcall expp
        | (INT_LITERAL | CHAR_LITERAL | STRING_LITERAL) expp
		| sizeof expp
expp  ::= ("="|">"|"<"|">="|"<="|"!="|"=="|"+"|"-"|"/"|"*"|"%"|"||"|"&&") exp expp
        | arrayaccess expp
		| fieldaccess expp
		| EPSILON
funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"
valueat      ::= "*" exp
addressof    ::= "&" exp
sizeof       ::= "sizeof" "(" type ")"
typecast     ::= "(" type ")" exp
arrayaccess  ::= "[" exp "]"
fieldaccess  ::= "." IDENT
