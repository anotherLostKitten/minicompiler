program    ::= include* decl* EOF
include    ::= "#include" STRING_LITERAL
decl 	   ::= structdecl | vfdecl
structdecl ::= structtype "{" (vardecl)+ "}" ";"
vfdecl     ::= type IDENT (funprams | vararr)
vararr     ::= ("[" INT_LITERAL "]")* ";"
funprams   ::= "(" params ")" block
vardecl    ::= type IDENT vararr
type       ::= ("int" | "char" | "void" | structtype) ("*")*
structtype ::= "struct" IDENT

params     ::= [ type IDENT ("," type IDENT)* ]
stmt       ::= block
             | "while" "(" exp ")" stmt
             | "if" "(" exp ")" stmt ["else" stmt]
             | "return" [exp] ";"
             | exp ";"
block      ::= "{" (vardecl)* (stmt)* "}"

exp   ::= ("-"|"+"|"*"|"&") exp
        | "(" type ")" exp
        | "(" exp ")" expp
		| IDENT expp
		| funcall expp
        | (INT_LITERAL | CHAR_LITERAL | STRING_LITERAL) expp
		| "sizeof" "(" type ")" expp
expp ::= ("="|">"|"<"|">="|"<="|"!="|"=="|"+"|"-"|"/"|"*"|"%"|"||"|"&&") exp expp
       | "[" exp "]" expp
	   | "." IDENT expp
	   | EPSILON
funcall      ::= IDENT "(" [ exp ("," exp)* ] ")"
