Program    ::= (Decl)*
Decl       ::= StructTypeDecl | VarDecl | FunDecl
Type        ::= BaseType | PointerType | StructType | ArrayType
BaseType    ::= INT | CHAR | VOID | NONE | UNKNOWN  // NONE used for statements
PointerType ::= Type // use to represent pointers to other types
StructType  ::= String // the String is the name of the declared struct type
ArrayType   ::= Type int // Type: element type, int: number of elements
StructTypeDecl ::= StructType VarDecl*
VarDecl    ::= Type String
FunDecl  ::= Type String VarDecl* Block

Expr::= IntLiteral|StrLiteral|ChrLiteral|VarExpr|FunCallExpr|BinOp|ArrayAccessExpr|FieldAccessExpr|ValueAtExpr|AddressOfExpr|SizeOfExpr|TypecastExpr|Assign

IntLiteral ::= int     // int stores the value of the integer
StrLiteral ::= String  // String stores the value of the String
ChrLiteral ::= char    // char stores the value of the Character
VarExpr     ::= String // the String is the name of the variable
FunCallExpr ::= String Expr* // the String corresponds to the name of the function to call and the Expr* is the list of arguments

BinOp  ::= Expr Op Expr
Op     ::= ADD | SUB | MUL | DIV | MOD | GT | LT | GE | LE | NE | EQ | OR | AND
ArrayAccessExpr ::= Expr Expr // first Expr: array, second Expr: index
FieldAccessExpr ::= Expr String // Expr: structure, String: name of the field
ValueAtExpr ::= Expr // (e.g. *p)
AddressOfExpr ::= Expr // (e.g. &a)
SizeOfExpr   ::= Type // sizeof(Type)
TypecastExpr ::= Type Expr
Assign       ::= Expr Expr
Stmt       ::= Block | While | If | Return | ExprStmt
ExprStmt ::= Expr
While      ::= Expr Stmt
If         ::= Expr Stmt [Stmt] // if second Stmt is null, no else part
Return     ::= [Expr]
Block      ::= VarDecl* Stmt*
